!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/61cc66cfc/
$(SO_TARGET)	Makefile	/^$(SO_TARGET): $(TARGET) $(OBJECTS)$/;"	t
$(TARGET)	Makefile	/^$(TARGET): CFLAGS += -fPIC$/;"	t
$(TARGET)	Makefile	/^$(TARGET): build $(OBJECTS)$/;"	t
$(TESTS)	Makefile	/^$(TESTS): $(TARGET) $(TEST_SRC) $/;"	t
BADFUNCS	Makefile	/^BADFUNCS='[^_.>a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)|stpn?cpy|a?sn?printf|byte_)/;"	m
BSSSC_BUFF_LEN	src/lcthw/bstrlib.c	/^#define BSSSC_BUFF_LEN /;"	d	file:
BSTRLIB_INCLUDE	src/lcthw/bstrlib.h	/^#define BSTRLIB_INCLUDE$/;"	d
BSTRLIB_NOVSNP	src/lcthw/bstrlib.c	/^#  define BSTRLIB_NOVSNP$/;"	d	file:
BSTRLIB_NOVSNP	src/lcthw/bstrlib.h	/^#  define BSTRLIB_NOVSNP$/;"	d
BSTR_BS_BUFF_LENGTH_GET	src/lcthw/bstrlib.h	/^#define BSTR_BS_BUFF_LENGTH_GET /;"	d
BSTR_ERR	src/lcthw/bstrlib.h	/^#define BSTR_ERR /;"	d
BSTR_OK	src/lcthw/bstrlib.h	/^#define BSTR_OK /;"	d
BSTR_VER_MAJOR	src/lcthw/bstrlib.h	/^#define BSTR_VER_MAJOR /;"	d
BSTR_VER_MINOR	src/lcthw/bstrlib.h	/^#define BSTR_VER_MINOR /;"	d
BSTR_VER_UPDATE	src/lcthw/bstrlib.h	/^#define BSTR_VER_UPDATE /;"	d
BS_BUFF_SZ	src/lcthw/bstrlib.c	/^#define BS_BUFF_SZ /;"	d	file:
CFCLEN	src/lcthw/bstrlib.c	/^#define CFCLEN /;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-g -O2 -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
CFLAGS	Makefile	/^dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra $(OPTFLAGS)$/;"	m
DArray	src/lcthw/DArray.h	/^typedef struct DArray$/;"	s
DArray	src/lcthw/DArray.h	/^} DArray;$/;"	t	typeref:struct:DArray
DArray_clear	src/lcthw/DArray.c	/^void DArray_clear(DArray *array)$/;"	f	typeref:typename:void
DArray_clear_destroy	src/lcthw/DArray.c	/^void DArray_clear_destroy(DArray *array)$/;"	f	typeref:typename:void
DArray_compare	src/lcthw/DArray_algos.h	/^typedef int (*DArray_compare)(const void *a, const void *b);$/;"	t	typeref:typename:int (*)(const void * a,const void * b)
DArray_contract	src/lcthw/DArray.c	/^int DArray_contract(DArray *array)$/;"	f	typeref:typename:int
DArray_count	src/lcthw/DArray.h	/^#define DArray_count(/;"	d
DArray_create	src/lcthw/DArray.c	/^DArray *DArray_create(size_t element_size, size_t initial_max)$/;"	f	typeref:typename:DArray *
DArray_destroy	src/lcthw/DArray.c	/^void DArray_destroy(DArray *array)$/;"	f	typeref:typename:void
DArray_end	src/lcthw/DArray.h	/^#define DArray_end(/;"	d
DArray_expand	src/lcthw/DArray.c	/^int DArray_expand(DArray *array)$/;"	f	typeref:typename:int
DArray_first	src/lcthw/DArray.h	/^#define DArray_first(/;"	d
DArray_free	src/lcthw/DArray.h	/^#define DArray_free(/;"	d
DArray_get	src/lcthw/DArray.h	/^static inline void *DArray_get(DArray *array, int i)$/;"	f	typeref:typename:void *
DArray_heapsort	src/lcthw/DArray_algos.c	/^int DArray_heapsort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_last	src/lcthw/DArray.h	/^#define DArray_last(/;"	d
DArray_max	src/lcthw/DArray.h	/^#define DArray_max(/;"	d
DArray_mergesort	src/lcthw/DArray_algos.c	/^int DArray_mergesort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_new	src/lcthw/DArray.h	/^static inline void *DArray_new(DArray *array)$/;"	f	typeref:typename:void *
DArray_pop	src/lcthw/DArray.c	/^void *DArray_pop(DArray *array)$/;"	f	typeref:typename:void *
DArray_push	src/lcthw/DArray.c	/^int DArray_push(DArray *array, void *el)$/;"	f	typeref:typename:int
DArray_qsort	src/lcthw/DArray_algos.c	/^int DArray_qsort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_remove	src/lcthw/DArray.h	/^static inline void *DArray_remove(DArray *array, int i)$/;"	f	typeref:typename:void *
DArray_resize	src/lcthw/DArray.c	/^static inline int DArray_resize(DArray *array, size_t newsize)$/;"	f	typeref:typename:int	file:
DArray_set	src/lcthw/DArray.h	/^static inline void DArray_set(DArray *array, int i, void *el)$/;"	f	typeref:typename:void
DEFAULT_EXPAND_RATE	src/lcthw/DArray.h	/^#define DEFAULT_EXPAND_RATE /;"	d
DEFAULT_NUMBER_OF_BUCKETS	src/lcthw/Hashmap.h	/^#define DEFAULT_NUMBER_OF_BUCKETS /;"	d
Hashmap	src/lcthw/Hashmap.h	/^typedef struct Hashmap$/;"	s
Hashmap	src/lcthw/Hashmap.h	/^} Hashmap;$/;"	t	typeref:struct:Hashmap
HashmapNode	src/lcthw/Hashmap.h	/^typedef struct HashmapNode$/;"	s
HashmapNode	src/lcthw/Hashmap.h	/^} HashmapNode;$/;"	t	typeref:struct:HashmapNode
Hashmap_compare	src/lcthw/Hashmap.h	/^typedef int (*Hashmap_compare)(void *a, void *b);$/;"	t	typeref:typename:int (*)(void * a,void * b)
Hashmap_create	src/lcthw/Hashmap.c	/^Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash)$/;"	f	typeref:typename:Hashmap *
Hashmap_delete	src/lcthw/Hashmap.c	/^void *Hashmap_delete(Hashmap *map, void *key)$/;"	f	typeref:typename:void *
Hashmap_destroy	src/lcthw/Hashmap.c	/^void Hashmap_destroy(Hashmap *map)$/;"	f	typeref:typename:void
Hashmap_find_bucket	src/lcthw/Hashmap.c	/^static inline DArray *Hashmap_find_bucket(Hashmap *map, void *key,$/;"	f	typeref:typename:DArray *	file:
Hashmap_get	src/lcthw/Hashmap.c	/^void *Hashmap_get(Hashmap *map, void *key)$/;"	f	typeref:typename:void *
Hashmap_get_node	src/lcthw/Hashmap.c	/^static inline int Hashmap_get_node(Hashmap *map, uint32_t hash, DArray *bucket, void *key)$/;"	f	typeref:typename:int	file:
Hashmap_hash	src/lcthw/Hashmap.h	/^typedef uint32_t (*Hashmap_hash)(void *key);$/;"	t	typeref:typename:uint32_t (*)(void * key)
Hashmap_node_create	src/lcthw/Hashmap.c	/^static inline HashmapNode *Hashmap_node_create(int hash, void *key, void *data)$/;"	f	typeref:typename:HashmapNode *	file:
Hashmap_set	src/lcthw/Hashmap.c	/^int Hashmap_set(Hashmap *map, void *key, void *data)$/;"	f	typeref:typename:int
Hashmap_traverse	src/lcthw/Hashmap.c	/^int Hashmap_traverse(Hashmap *map, Hashmap_traverse_cb traverse_cb)$/;"	f	typeref:typename:int
Hashmap_traverse_cb	src/lcthw/Hashmap.h	/^typedef int (*Hashmap_traverse_cb)(HashmapNode *node);$/;"	t	typeref:typename:int (*)(HashmapNode * node)
INITIAL_STATIC_FIND_INDEX_COUNT	src/lcthw/bstrlib.c	/^#define INITIAL_STATIC_FIND_INDEX_COUNT /;"	d	file:
LIBS	Makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LIST_FOREACH	src/lcthw/list.h	/^#define LIST_FOREACH(/;"	d
LONG_BITS_QTY	src/lcthw/bstrlib.c	/^#define LONG_BITS_QTY /;"	d	file:
LONG_LOG_BITS_QTY	src/lcthw/bstrlib.c	/^#define LONG_LOG_BITS_QTY /;"	d	file:
LONG_TYPE	src/lcthw/bstrlib.c	/^#define LONG_TYPE /;"	d	file:
List	src/lcthw/list.h	/^typedef struct List$/;"	s
List	src/lcthw/list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	src/lcthw/list.h	/^typedef struct ListNode$/;"	s
ListNode	src/lcthw/list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
ListNode_swap	src/lcthw/list_algos.c	/^void ListNode_swap(ListNode *a, ListNode *b)$/;"	f	typeref:typename:void
List_bubble_sort	src/lcthw/list_algos.c	/^int List_bubble_sort(List *list, List_compare cmp)$/;"	f	typeref:typename:int
List_clear	src/lcthw/list.c	/^void List_clear(List *list)$/;"	f	typeref:typename:void
List_clear_destroy	src/lcthw/list.c	/^void List_clear_destroy(List *list)$/;"	f	typeref:typename:void
List_compare	src/lcthw/list_algos.h	/^typedef int (*List_compare)(const void *str1, const void *str2);$/;"	t	typeref:typename:int (*)(const void * str1,const void * str2)
List_count	src/lcthw/list.h	/^#define List_count(/;"	d
List_create	src/lcthw/list.c	/^List *List_create()$/;"	f	typeref:typename:List *
List_destroy	src/lcthw/list.c	/^void List_destroy(List *list)$/;"	f	typeref:typename:void
List_first	src/lcthw/list.h	/^#define List_first(/;"	d
List_last	src/lcthw/list.h	/^#define List_last(/;"	d
List_merge	src/lcthw/list_algos.c	/^List *List_merge(List *left, List *right, List_compare cmp)$/;"	f	typeref:typename:List *
List_merge_sort	src/lcthw/list_algos.c	/^List *List_merge_sort(List *list, List_compare cmp)$/;"	f	typeref:typename:List *
List_pop	src/lcthw/list.c	/^void *List_pop(List *list)$/;"	f	typeref:typename:void *
List_push	src/lcthw/list.c	/^void List_push(List *list, void *value)$/;"	f	typeref:typename:void
List_remove	src/lcthw/list.c	/^void *List_remove(List *list, ListNode *node)$/;"	f	typeref:typename:void *
List_shift	src/lcthw/list.c	/^void *List_shift(List *list)$/;"	f	typeref:typename:void *
List_unshift	src/lcthw/list.c	/^void List_unshift(List *list, void *value)$/;"	f	typeref:typename:void
NUM_TESTS	tests/queue_tests.c	/^#define NUM_TESTS /;"	d	file:
NUM_TESTS	tests/stack_tests.c	/^#define NUM_TESTS /;"	d	file:
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
RUN_TESTS	tests/minunit.h	/^#define RUN_TESTS(/;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	Makefile	/^SO_TARGET=$(patsubst %.a,%.so,$(TARGET))$/;"	m
STACK_FOREACH	src/lcthw/stack.h	/^#define STACK_FOREACH(/;"	d
START_VSNBUFF	src/lcthw/bstrlib.c	/^#define START_VSNBUFF /;"	d	file:
Stack	src/lcthw/stack.h	/^typedef List Stack;$/;"	t	typeref:typename:List
Stack_count	src/lcthw/stack.h	/^#define Stack_count(/;"	d
Stack_create	src/lcthw/stack.h	/^#define Stack_create(/;"	d
Stack_destroy	src/lcthw/stack.h	/^#define Stack_destroy(/;"	d
Stack_peek	src/lcthw/stack.h	/^#define Stack_peek(/;"	d
Stack_pop	src/lcthw/stack.h	/^#define Stack_pop(/;"	d
Stack_push	src/lcthw/stack.h	/^#define Stack_push(/;"	d
TARGET	Makefile	/^TARGET=build\/liblcthw.a$/;"	m
TESTS	Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	Makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
_CRT_SECURE_NO_WARNINGS	src/lcthw/bstrlib.c	/^# define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_DArray_H	src/lcthw/DArray.h	/^#define _DArray_H$/;"	d
_STACK_H	src/lcthw/stack.h	/^#define _STACK_H$/;"	d
__dbg_h__	src/lcthw/dbg.h	/^#define __dbg_h__$/;"	d
_lcthw_Hashmap_h	src/lcthw/Hashmap.h	/^#define _lcthw_Hashmap_h$/;"	d
_lcthw_List_algos_h	src/lcthw/list_algos.h	/^#define _lcthw_List_algos_h$/;"	d
_lcthw_List_h	src/lcthw/list.h	/^#define _lcthw_List_h$/;"	d
_minunit_h	tests/minunit.h	/^#define _minunit_h$/;"	d
all	Makefile	/^all: $(TARGET) $(SO_TARGET) tests $/;"	t
all_tests	tests/queue_tests.c	/^char *all_tests()$/;"	f	typeref:typename:char *
all_tests	tests/stack_tests.c	/^char *all_tests()$/;"	f	typeref:typename:char *
b	src/lcthw/bstrlib.c	/^	bstring b;$/;"	m	struct:genBstrList	typeref:typename:bstring	file:
bBlockCopy	src/lcthw/bstrlib.c	/^#define bBlockCopy(/;"	d	file:
bNgetc	src/lcthw/bstrlib.h	/^typedef int (*bNgetc) (void *parm);$/;"	t	typeref:typename:int (*)(void * parm)
bNread	src/lcthw/bstrlib.h	/^typedef size_t (* bNread) (void *buff, size_t elsize, size_t nelem, void *parm);$/;"	t	typeref:typename:size_t (*)(void * buff,size_t elsize,size_t nelem,void * parm)
bStream	src/lcthw/bstrlib.c	/^struct bStream {$/;"	s	file:
balloc	src/lcthw/bstrlib.c	/^int balloc (bstring b, int olen) {$/;"	f	typeref:typename:int
ballocmin	src/lcthw/bstrlib.c	/^int ballocmin (bstring b, int len) {$/;"	f	typeref:typename:int
bassign	src/lcthw/bstrlib.c	/^int bassign (bstring a, const_bstring b) {$/;"	f	typeref:typename:int
bassignStatic	src/lcthw/bstrlib.h	/^#define bassignStatic(/;"	d
bassignblk	src/lcthw/bstrlib.c	/^int bassignblk (bstring a, const void * s, int len) {$/;"	f	typeref:typename:int
bassigncstr	src/lcthw/bstrlib.c	/^int bassigncstr (bstring a, const char * str) {$/;"	f	typeref:typename:int
bassignformat	src/lcthw/bstrlib.c	/^int bassignformat (bstring b, const char * fmt, ...) {$/;"	f	typeref:typename:int
bassigngets	src/lcthw/bstrlib.c	/^int bassigngets (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:int
bassignmidstr	src/lcthw/bstrlib.c	/^int bassignmidstr (bstring a, const_bstring b, int left, int len) {$/;"	f	typeref:typename:int
bcatStatic	src/lcthw/bstrlib.h	/^#define bcatStatic(/;"	d
bcatblk	src/lcthw/bstrlib.c	/^int bcatblk (bstring b, const void * s, int len) {$/;"	f	typeref:typename:int
bcatcstr	src/lcthw/bstrlib.c	/^int bcatcstr (bstring b, const char * s) {$/;"	f	typeref:typename:int
bchar	src/lcthw/bstrlib.h	/^#define bchar(/;"	d
bchare	src/lcthw/bstrlib.h	/^#define bchare(/;"	d
bconcat	src/lcthw/bstrlib.c	/^int bconcat (bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bconchar	src/lcthw/bstrlib.c	/^int bconchar (bstring b, char c) {$/;"	f	typeref:typename:int
bcstrfree	src/lcthw/bstrlib.c	/^int bcstrfree (char * s) {$/;"	f	typeref:typename:int
bdata	src/lcthw/bstrlib.h	/^#define bdata(/;"	d
bdatae	src/lcthw/bstrlib.h	/^#define bdatae(/;"	d
bdataofs	src/lcthw/bstrlib.h	/^#define bdataofs(/;"	d
bdataofse	src/lcthw/bstrlib.h	/^#define bdataofse(/;"	d
bdelete	src/lcthw/bstrlib.c	/^int bdelete (bstring b, int pos, int len) {$/;"	f	typeref:typename:int
bdestroy	src/lcthw/bstrlib.c	/^int bdestroy (bstring b) {$/;"	f	typeref:typename:int
bfindreplace	src/lcthw/bstrlib.c	/^int bfindreplace (bstring b, const_bstring find, const_bstring repl,$/;"	f	typeref:typename:int
bfindreplacecaseless	src/lcthw/bstrlib.c	/^int bfindreplacecaseless (bstring b, const_bstring find, const_bstring repl,$/;"	f	typeref:typename:int
bformat	src/lcthw/bstrlib.c	/^bstring bformat (const char * fmt, ...) {$/;"	f	typeref:typename:bstring
bformata	src/lcthw/bstrlib.c	/^int bformata (bstring b, const char * fmt, ...) {$/;"	f	typeref:typename:int
bfromStatic	src/lcthw/bstrlib.h	/^#define bfromStatic(/;"	d
bfromcstr	src/lcthw/bstrlib.c	/^bstring bfromcstr (const char * str) {$/;"	f	typeref:typename:bstring
bfromcstralloc	src/lcthw/bstrlib.c	/^bstring bfromcstralloc (int mlen, const char * str) {$/;"	f	typeref:typename:bstring
bfromcstrrangealloc	src/lcthw/bstrlib.c	/^bstring bfromcstrrangealloc (int minl, int maxl, const char* str) {$/;"	f	typeref:typename:bstring
bgets	src/lcthw/bstrlib.c	/^bstring bgets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:bstring
bgetsa	src/lcthw/bstrlib.c	/^int bgetsa (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:int
binchr	src/lcthw/bstrlib.c	/^int binchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
binchrCF	src/lcthw/bstrlib.c	/^static int binchrCF (const unsigned char * data, int len, int pos,$/;"	f	typeref:typename:int	file:
binchrr	src/lcthw/bstrlib.c	/^int binchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
binchrrCF	src/lcthw/bstrlib.c	/^static int binchrrCF (const unsigned char * data, int pos,$/;"	f	typeref:typename:int	file:
binsert	src/lcthw/bstrlib.c	/^int binsert (bstring b1, int pos, const_bstring b2, unsigned char fill) {$/;"	f	typeref:typename:int
binsertStatic	src/lcthw/bstrlib.h	/^#define binsertStatic(/;"	d
binsertblk	src/lcthw/bstrlib.c	/^int binsertblk (bstring b, int pos, const void * blk, int len,$/;"	f	typeref:typename:int
binsertch	src/lcthw/bstrlib.c	/^int binsertch (bstring b, int pos, int len, unsigned char fill) {$/;"	f	typeref:typename:int
binstr	src/lcthw/bstrlib.c	/^int binstr (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrcaseless	src/lcthw/bstrlib.c	/^int binstrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrr	src/lcthw/bstrlib.c	/^int binstrr (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrrcaseless	src/lcthw/bstrlib.c	/^int binstrrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
biseq	src/lcthw/bstrlib.c	/^int biseq (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
biseqStatic	src/lcthw/bstrlib.h	/^#define biseqStatic(/;"	d
biseqblk	src/lcthw/bstrlib.c	/^int biseqblk (const_bstring b, const void * blk, int len) {$/;"	f	typeref:typename:int
biseqcaseless	src/lcthw/bstrlib.c	/^int biseqcaseless (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
biseqcaselessStatic	src/lcthw/bstrlib.h	/^#define biseqcaselessStatic(/;"	d
biseqcaselessblk	src/lcthw/bstrlib.c	/^int biseqcaselessblk (const_bstring b, const void * blk, int len) {$/;"	f	typeref:typename:int
biseqcstr	src/lcthw/bstrlib.c	/^int biseqcstr (const_bstring b, const char * s) {$/;"	f	typeref:typename:int
biseqcstrcaseless	src/lcthw/bstrlib.c	/^int biseqcstrcaseless (const_bstring b, const char * s) {$/;"	f	typeref:typename:int
bisstemeqStatic	src/lcthw/bstrlib.h	/^#define bisstemeqStatic(/;"	d
bisstemeqblk	src/lcthw/bstrlib.c	/^int bisstemeqblk (const_bstring b0, const void * blk, int len) {$/;"	f	typeref:typename:int
bisstemeqcaselessStatic	src/lcthw/bstrlib.h	/^#define bisstemeqcaselessStatic(/;"	d
bisstemeqcaselessblk	src/lcthw/bstrlib.c	/^int bisstemeqcaselessblk (const_bstring b0, const void * blk, int len) {$/;"	f	typeref:typename:int
biswriteprotected	src/lcthw/bstrlib.h	/^#define biswriteprotected(/;"	d
bjoin	src/lcthw/bstrlib.c	/^bstring bjoin (const struct bstrList * bl, const_bstring sep) {$/;"	f	typeref:typename:bstring
bjoinStatic	src/lcthw/bstrlib.h	/^#define bjoinStatic(/;"	d
bjoinblk	src/lcthw/bstrlib.c	/^bstring bjoinblk (const struct bstrList * bl, const void * blk, int len) {$/;"	f	typeref:typename:bstring
bl	src/lcthw/bstrlib.c	/^	struct bstrList * bl;$/;"	m	struct:genBstrList	typeref:struct:bstrList *	file:
blength	src/lcthw/bstrlib.h	/^#define blength(/;"	d
blengthe	src/lcthw/bstrlib.h	/^#define blengthe(/;"	d
blk2bstr	src/lcthw/bstrlib.c	/^bstring blk2bstr (const void * blk, int len) {$/;"	f	typeref:typename:bstring
blk2tbstr	src/lcthw/bstrlib.h	/^#define blk2tbstr(/;"	d
bltrimws	src/lcthw/bstrlib.c	/^int bltrimws (bstring b) {$/;"	f	typeref:typename:int
bmid2tbstr	src/lcthw/bstrlib.h	/^#define bmid2tbstr(/;"	d
bmidstr	src/lcthw/bstrlib.c	/^bstring bmidstr (const_bstring b, int left, int len) {$/;"	f	typeref:typename:bstring
bninchr	src/lcthw/bstrlib.c	/^int bninchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
bninchrr	src/lcthw/bstrlib.c	/^int bninchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
bpattern	src/lcthw/bstrlib.c	/^int bpattern (bstring b, int len) {$/;"	f	typeref:typename:int
bread	src/lcthw/bstrlib.c	/^bstring bread (bNread readPtr, void * parm) {$/;"	f	typeref:typename:bstring
breada	src/lcthw/bstrlib.c	/^int breada (bstring b, bNread readPtr, void * parm) {$/;"	f	typeref:typename:int
breplace	src/lcthw/bstrlib.c	/^int breplace (bstring b1, int pos, int len, const_bstring b2,$/;"	f	typeref:typename:int
brtrimws	src/lcthw/bstrlib.c	/^int brtrimws (bstring b) {$/;"	f	typeref:typename:int
bsStatic	src/lcthw/bstrlib.h	/^# define bsStatic(/;"	d
bsStaticBlkParms	src/lcthw/bstrlib.h	/^#define bsStaticBlkParms(/;"	d
bsStaticMlen	src/lcthw/bstrlib.h	/^#define bsStaticMlen(/;"	d
bsbufflength	src/lcthw/bstrlib.c	/^int bsbufflength (struct bStream * s, int sz) {$/;"	f	typeref:typename:int
bscb	src/lcthw/bstrlib.c	/^static int bscb (void * parm, int ofs, int len) {$/;"	f	typeref:typename:int	file:
bsclose	src/lcthw/bstrlib.c	/^void * bsclose (struct bStream * s) {$/;"	f	typeref:typename:void *
bseof	src/lcthw/bstrlib.c	/^int bseof (const struct bStream * s) {$/;"	f	typeref:typename:int
bsetstr	src/lcthw/bstrlib.c	/^int bsetstr (bstring b0, int pos, const_bstring b1, unsigned char fill) {$/;"	f	typeref:typename:int
bsopen	src/lcthw/bstrlib.c	/^struct bStream * bsopen (bNread readPtr, void * parm) {$/;"	f	typeref:struct:bStream *
bspeek	src/lcthw/bstrlib.c	/^int bspeek (bstring r, const struct bStream * s) {$/;"	f	typeref:typename:int
bsplit	src/lcthw/bstrlib.c	/^struct bstrList * bsplit (const_bstring str, unsigned char splitChar) {$/;"	f	typeref:struct:bstrList *
bsplitcb	src/lcthw/bstrlib.c	/^int bsplitcb (const_bstring str, unsigned char splitChar, int pos,$/;"	f	typeref:typename:int
bsplits	src/lcthw/bstrlib.c	/^struct bstrList * bsplits (const_bstring str, const_bstring splitStr) {$/;"	f	typeref:struct:bstrList *
bsplitscb	src/lcthw/bstrlib.c	/^int bsplitscb (const_bstring str, const_bstring splitStr, int pos,$/;"	f	typeref:typename:int
bsplitstr	src/lcthw/bstrlib.c	/^struct bstrList * bsplitstr (const_bstring str, const_bstring splitStr) {$/;"	f	typeref:struct:bstrList *
bsplitstrcb	src/lcthw/bstrlib.c	/^int bsplitstrcb (const_bstring str, const_bstring splitStr, int pos,$/;"	f	typeref:typename:int
bsread	src/lcthw/bstrlib.c	/^int bsread (bstring r, struct bStream * s, int n) {$/;"	f	typeref:typename:int
bsreada	src/lcthw/bstrlib.c	/^int bsreada (bstring r, struct bStream * s, int n) {$/;"	f	typeref:typename:int
bsreadln	src/lcthw/bstrlib.c	/^int bsreadln (bstring r, struct bStream * s, char terminator) {$/;"	f	typeref:typename:int
bsreadlna	src/lcthw/bstrlib.c	/^int bsreadlna (bstring r, struct bStream * s, char terminator) {$/;"	f	typeref:typename:int
bsreadlns	src/lcthw/bstrlib.c	/^int bsreadlns (bstring r, struct bStream * s, const_bstring term) {$/;"	f	typeref:typename:int
bsreadlnsa	src/lcthw/bstrlib.c	/^int bsreadlnsa (bstring r, struct bStream * s, const_bstring term) {$/;"	f	typeref:typename:int
bssplitscb	src/lcthw/bstrlib.c	/^int bssplitscb (struct bStream * s, const_bstring splitStr,$/;"	f	typeref:typename:int
bssplitstrcb	src/lcthw/bstrlib.c	/^int bssplitstrcb (struct bStream * s, const_bstring splitStr,$/;"	f	typeref:typename:int
bstr2cstr	src/lcthw/bstrlib.c	/^char * bstr2cstr (const_bstring b, char z) {$/;"	f	typeref:typename:char *
bstrList	src/lcthw/bstrlib.h	/^struct bstrList {$/;"	s
bstrListAlloc	src/lcthw/bstrlib.c	/^int bstrListAlloc (struct bstrList * sl, int msz) {$/;"	f	typeref:typename:int
bstrListAllocMin	src/lcthw/bstrlib.c	/^int bstrListAllocMin (struct bstrList * sl, int msz) {$/;"	f	typeref:typename:int
bstrListCreate	src/lcthw/bstrlib.c	/^struct bstrList * bstrListCreate (void) {$/;"	f	typeref:struct:bstrList *
bstrListDestroy	src/lcthw/bstrlib.c	/^int bstrListDestroy (struct bstrList * sl) {$/;"	f	typeref:typename:int
bstr__alloc	src/lcthw/bstrlib.c	/^#define bstr__alloc(/;"	d	file:
bstr__alloc	src/lcthw/bstrlib.c	/^void* bstr__alloc (size_t sz) {$/;"	f	typeref:typename:void *
bstr__free	src/lcthw/bstrlib.c	/^#define bstr__free(/;"	d	file:
bstr__memchr	src/lcthw/bstrlib.c	/^#define bstr__memchr(/;"	d	file:
bstr__memcmp	src/lcthw/bstrlib.c	/^#define bstr__memcmp(/;"	d	file:
bstr__memcpy	src/lcthw/bstrlib.c	/^#define bstr__memcpy(/;"	d	file:
bstr__memmove	src/lcthw/bstrlib.c	/^#define bstr__memmove(/;"	d	file:
bstr__memset	src/lcthw/bstrlib.c	/^#define bstr__memset(/;"	d	file:
bstr__realloc	src/lcthw/bstrlib.c	/^#define bstr__realloc(/;"	d	file:
bstrchr	src/lcthw/bstrlib.h	/^#define bstrchr(/;"	d
bstrchrp	src/lcthw/bstrlib.c	/^int bstrchrp (const_bstring b, int c, int pos) {$/;"	f	typeref:typename:int
bstrcmp	src/lcthw/bstrlib.c	/^int bstrcmp (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bstrcpy	src/lcthw/bstrlib.c	/^bstring bstrcpy (const_bstring b) {$/;"	f	typeref:typename:bstring
bstricmp	src/lcthw/bstrlib.c	/^int bstricmp (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bstring	src/lcthw/bstrlib.h	/^typedef struct tagbstring * bstring;$/;"	t	typeref:struct:tagbstring *
bstrncmp	src/lcthw/bstrlib.c	/^int bstrncmp (const_bstring b0, const_bstring b1, int n) {$/;"	f	typeref:typename:int
bstrnicmp	src/lcthw/bstrlib.c	/^int bstrnicmp (const_bstring b0, const_bstring b1, int n) {$/;"	f	typeref:typename:int
bstrrchr	src/lcthw/bstrlib.h	/^#define bstrrchr(/;"	d
bstrrchrp	src/lcthw/bstrlib.c	/^int bstrrchrp (const_bstring b, int c, int pos) {$/;"	f	typeref:typename:int
bsunread	src/lcthw/bstrlib.c	/^int bsunread (struct bStream * s, const_bstring b) {$/;"	f	typeref:typename:int
btfromblk	src/lcthw/bstrlib.h	/^#define btfromblk(/;"	d
btfromblkltrimws	src/lcthw/bstrlib.h	/^#define btfromblkltrimws(/;"	d
btfromblkrtrimws	src/lcthw/bstrlib.h	/^#define btfromblkrtrimws(/;"	d
btfromblktrimws	src/lcthw/bstrlib.h	/^#define btfromblktrimws(/;"	d
btfromcstr	src/lcthw/bstrlib.h	/^#define btfromcstr(/;"	d
btolower	src/lcthw/bstrlib.c	/^int btolower (bstring b) {$/;"	f	typeref:typename:int
btoupper	src/lcthw/bstrlib.c	/^int btoupper (bstring b) {$/;"	f	typeref:typename:int
btrimws	src/lcthw/bstrlib.c	/^int btrimws (bstring b) {$/;"	f	typeref:typename:int
btrunc	src/lcthw/bstrlib.c	/^int btrunc (bstring b, int n) {$/;"	f	typeref:typename:int
buckets	src/lcthw/Hashmap.h	/^    DArray *buckets;			\/\/ 用于存储键-值对的桶数组$/;"	m	struct:Hashmap	typeref:typename:DArray *
buff	src/lcthw/bstrlib.c	/^	bstring buff;		\/* Buffer for over-reads *\/$/;"	m	struct:bStream	typeref:typename:bstring	file:
build	Makefile	/^build:$/;"	t
buildCharField	src/lcthw/bstrlib.c	/^static int buildCharField (struct charField * cf, const_bstring b) {$/;"	f	typeref:typename:int	file:
bvcformata	src/lcthw/bstrlib.c	/^int bvcformata (bstring b, int count, const char * fmt, va_list arg) {$/;"	f	typeref:typename:int
bvformata	src/lcthw/bstrlib.h	/^#define bvformata(/;"	d
bwriteallow	src/lcthw/bstrlib.h	/^#define bwriteallow(/;"	d
bwriteprotect	src/lcthw/bstrlib.h	/^#define bwriteprotect(/;"	d
charField	src/lcthw/bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	s	file:
charField	src/lcthw/bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	s	file:
check	Makefile	/^check:$/;"	t
check	src/lcthw/dbg.h	/^#define check(/;"	d
check_debug	src/lcthw/dbg.h	/^#define check_debug(/;"	d
check_mem	src/lcthw/dbg.h	/^#define check_mem(/;"	d
clean	Makefile	/^clean:$/;"	t
clean_errno	src/lcthw/dbg.h	/^#define clean_errno(/;"	d
compare	src/lcthw/Hashmap.h	/^    Hashmap_compare compare;	\/\/ 用于比较键的函数指针$/;"	m	struct:Hashmap	typeref:typename:Hashmap_compare
const_bstring	src/lcthw/bstrlib.h	/^typedef const struct tagbstring * const_bstring;$/;"	t	typeref:typename:const struct tagbstring *
content	src/lcthw/bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	m	struct:charField	typeref:typename:LONG_TYPE[]	file:
content	src/lcthw/bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	m	struct:charField	typeref:typename:unsigned char[]	file:
contents	src/lcthw/DArray.h	/^    void **contents;        \/\/ 一个指向void*类型的指针数组，用于存储元素的实/;"	m	struct:DArray	typeref:typename:void **
count	src/lcthw/list.h	/^    int count;$/;"	m	struct:List	typeref:typename:int
cstr2bstr	src/lcthw/bstrlib.h	/^#define cstr2bstr /;"	d
cstr2tbstr	src/lcthw/bstrlib.h	/^#define cstr2tbstr /;"	d
darray_algos_h	src/lcthw/DArray_algos.h	/^#define darray_algos_h$/;"	d
data	src/lcthw/Hashmap.h	/^    void *data;      \/\/ 指向关联数据的指针$/;"	m	struct:HashmapNode	typeref:typename:void *
data	src/lcthw/bstrlib.h	/^	unsigned char * data;$/;"	m	struct:tagbstring	typeref:typename:unsigned char *
debug	src/lcthw/dbg.h	/^#define debug(/;"	d
default_compare	src/lcthw/Hashmap.c	/^static int default_compare(void *a, void *b)$/;"	f	typeref:typename:int	file:
default_hash	src/lcthw/Hashmap.c	/^static uint32_t default_hash(void *a)$/;"	f	typeref:typename:uint32_t	file:
dev	Makefile	/^dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra $(OPTFLAGS)$/;"	t
dev	Makefile	/^dev: all$/;"	t
downcase	src/lcthw/bstrlib.c	/^#define downcase(/;"	d	file:
element_size	src/lcthw/DArray.h	/^    size_t element_size;    \/\/ 数组中每个元素的大小$/;"	m	struct:DArray	typeref:typename:size_t
end	src/lcthw/DArray.h	/^    int end;                \/\/ 数组的当前大小，数组中元素的数量$/;"	m	struct:DArray	typeref:typename:int
entry	src/lcthw/bstrlib.h	/^    bstring * entry;$/;"	m	struct:bstrList	typeref:typename:bstring *
expand_rate	src/lcthw/DArray.h	/^    size_t expand_rate;     \/\/ 数组扩展时的扩展速率$/;"	m	struct:DArray	typeref:typename:size_t
exvsnprintf	src/lcthw/bstrlib.c	/^#define exvsnprintf(/;"	d	file:
findreplaceengine	src/lcthw/bstrlib.c	/^static int findreplaceengine (bstring b, const_bstring find,$/;"	f	typeref:typename:int	file:
first	src/lcthw/list.h	/^    ListNode *first;$/;"	m	struct:List	typeref:typename:ListNode *
genBstrList	src/lcthw/bstrlib.c	/^struct genBstrList {$/;"	s	file:
hash	src/lcthw/Hashmap.h	/^    Hashmap_hash hash;			\/\/ 用于对键进行哈希的函数指针$/;"	m	struct:Hashmap	typeref:typename:Hashmap_hash
hash	src/lcthw/Hashmap.h	/^    uint32_t hash;   \/\/ 键的哈希值$/;"	m	struct:HashmapNode	typeref:typename:uint32_t
install	Makefile	/^install: all$/;"	t
instr_fnptr	src/lcthw/bstrlib.c	/^typedef int (*instr_fnptr) (const_bstring s1, int pos, const_bstring s2);$/;"	t	typeref:typename:int (*)(const_bstring s1,int pos,const_bstring s2)	file:
invertCharField	src/lcthw/bstrlib.c	/^static void invertCharField (struct charField * cf) {$/;"	f	typeref:typename:void	file:
isEOF	src/lcthw/bstrlib.c	/^	int isEOF;			\/* track file's EOF state *\/$/;"	m	struct:bStream	typeref:typename:int	file:
key	src/lcthw/Hashmap.h	/^    void *key;       \/\/ 指向键的指针$/;"	m	struct:HashmapNode	typeref:typename:void *
last	src/lcthw/list.h	/^    ListNode *last;$/;"	m	struct:List	typeref:typename:ListNode *
log_err	src/lcthw/dbg.h	/^#define log_err(/;"	d
log_info	src/lcthw/dbg.h	/^#define log_info(/;"	d
log_warn	src/lcthw/dbg.h	/^#define log_warn(/;"	d
max	src/lcthw/DArray.h	/^    int max;                \/\/ 数组的最大容量$/;"	m	struct:DArray	typeref:typename:int
maxBuffSz	src/lcthw/bstrlib.c	/^	int maxBuffSz;$/;"	m	struct:bStream	typeref:typename:int	file:
mlen	src/lcthw/bstrlib.h	/^	int mlen;$/;"	m	struct:tagbstring	typeref:typename:int
mlen	src/lcthw/bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList	typeref:typename:int
mu_assert	tests/minunit.h	/^#define mu_assert(/;"	d
mu_run_test	tests/minunit.h	/^#define mu_run_test(/;"	d
mu_suite_start	tests/minunit.h	/^#define mu_suite_start(/;"	d
next	src/lcthw/list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode *
parm	src/lcthw/bstrlib.c	/^	void * parm;		\/* The stream handle for core stream *\/$/;"	m	struct:bStream	typeref:typename:void *	file:
prev	src/lcthw/list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode *
qty	src/lcthw/bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList	typeref:typename:int
queue	tests/queue_tests.c	/^static Queue *queue = NULL;$/;"	v	typeref:typename:Queue *	file:
readFnPtr	src/lcthw/bstrlib.c	/^	bNread readFnPtr;	\/* fread compatible fnptr for core stream *\/$/;"	m	struct:bStream	typeref:typename:bNread	file:
sentinel	src/lcthw/dbg.h	/^#define sentinel(/;"	d
setInCharField	src/lcthw/bstrlib.c	/^#define setInCharField(/;"	d	file:
sh_TEST	Makefile	/^sh_TEST:$/;"	t
slen	src/lcthw/bstrlib.h	/^	int slen;$/;"	m	struct:tagbstring	typeref:typename:int
snapUpSize	src/lcthw/bstrlib.c	/^static int snapUpSize (int i) {$/;"	f	typeref:typename:int	file:
stack	tests/stack_tests.c	/^static Stack *stack = NULL;$/;"	v	typeref:typename:Stack *	file:
tagbstring	src/lcthw/bstrlib.h	/^struct tagbstring {$/;"	s
testInCharField	src/lcthw/bstrlib.c	/^#define testInCharField(/;"	d	file:
test_create	tests/queue_tests.c	/^char *test_create()$/;"	f	typeref:typename:char *
test_create	tests/stack_tests.c	/^char *test_create()$/;"	f	typeref:typename:char *
test_destroy	tests/queue_tests.c	/^char *test_destroy()$/;"	f	typeref:typename:char *
test_destroy	tests/stack_tests.c	/^char *test_destroy()$/;"	f	typeref:typename:char *
test_push_pop	tests/stack_tests.c	/^char *test_push_pop()$/;"	f	typeref:typename:char *
test_send_recv	tests/queue_tests.c	/^char *test_send_recv()$/;"	f	typeref:typename:char *
tests	Makefile	/^tests: $(TESTS)$/;"	t
tests	Makefile	/^tests: CFLAGS += -Isrc$/;"	t
tests	tests/queue_tests.c	/^char *tests[] = {"test1 data", "test2 data", "test3 data"};$/;"	v	typeref:typename:char * []
tests	tests/stack_tests.c	/^char *tests[] = {"test1 data", "test2 data", "test3 data"};$/;"	v	typeref:typename:char * []
tests_run	tests/minunit.h	/^int tests_run;$/;"	v	typeref:typename:int
upcase	src/lcthw/bstrlib.c	/^#define   upcase(/;"	d	file:
valgrind	Makefile	/^valgrind:$/;"	t
value	src/lcthw/list.h	/^    void *value;$/;"	m	struct:ListNode	typeref:typename:void *
wspace	src/lcthw/bstrlib.c	/^#define   wspace(/;"	d	file:
