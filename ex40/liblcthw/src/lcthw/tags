!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/61cc66cfc/
BSSSC_BUFF_LEN	bstrlib.c	/^#define BSSSC_BUFF_LEN /;"	d	file:
BSTRLIB_INCLUDE	bstrlib.h	/^#define BSTRLIB_INCLUDE$/;"	d
BSTRLIB_NOVSNP	bstrlib.c	/^#  define BSTRLIB_NOVSNP$/;"	d	file:
BSTRLIB_NOVSNP	bstrlib.h	/^#  define BSTRLIB_NOVSNP$/;"	d
BSTR_BS_BUFF_LENGTH_GET	bstrlib.h	/^#define BSTR_BS_BUFF_LENGTH_GET /;"	d
BSTR_ERR	bstrlib.h	/^#define BSTR_ERR /;"	d
BSTR_OK	bstrlib.h	/^#define BSTR_OK /;"	d
BSTR_VER_MAJOR	bstrlib.h	/^#define BSTR_VER_MAJOR /;"	d
BSTR_VER_MINOR	bstrlib.h	/^#define BSTR_VER_MINOR /;"	d
BSTR_VER_UPDATE	bstrlib.h	/^#define BSTR_VER_UPDATE /;"	d
BSTree	bstree.h	/^}BSTree;$/;"	t	typeref:struct:__anon982e7b800208
BSTreeNode	bstree.h	/^}BSTreeNode;$/;"	t	typeref:struct:__anon982e7b800108
BSTree_compare	bstree.h	/^typedef int (*BSTree_compare)(void *a, void *b);$/;"	t	typeref:typename:int (*)(void * a,void * b)
BSTree_create	bstree.c	/^BSTree *BSTree_create(BSTree_compare compare) {$/;"	f	typeref:typename:BSTree *
BSTree_traverse_cb	bstree.h	/^typedef int (*BSTree_traverse_cb)(BSTreeNode *node);$/;"	t	typeref:typename:int (*)(BSTreeNode * node)
BS_BUFF_SZ	bstrlib.c	/^#define BS_BUFF_SZ /;"	d	file:
CFCLEN	bstrlib.c	/^#define CFCLEN /;"	d	file:
DArray	DArray.h	/^typedef struct DArray$/;"	s
DArray	DArray.h	/^} DArray;$/;"	t	typeref:struct:DArray
DArray_clear	DArray.c	/^void DArray_clear(DArray *array)$/;"	f	typeref:typename:void
DArray_clear_destroy	DArray.c	/^void DArray_clear_destroy(DArray *array)$/;"	f	typeref:typename:void
DArray_compare	DArray_algos.h	/^typedef int (*DArray_compare)(const void *a, const void *b);$/;"	t	typeref:typename:int (*)(const void * a,const void * b)
DArray_contract	DArray.c	/^int DArray_contract(DArray *array)$/;"	f	typeref:typename:int
DArray_count	DArray.h	/^#define DArray_count(/;"	d
DArray_create	DArray.c	/^DArray *DArray_create(size_t element_size, size_t initial_max)$/;"	f	typeref:typename:DArray *
DArray_destroy	DArray.c	/^void DArray_destroy(DArray *array)$/;"	f	typeref:typename:void
DArray_end	DArray.h	/^#define DArray_end(/;"	d
DArray_expand	DArray.c	/^int DArray_expand(DArray *array)$/;"	f	typeref:typename:int
DArray_first	DArray.h	/^#define DArray_first(/;"	d
DArray_free	DArray.h	/^#define DArray_free(/;"	d
DArray_get	DArray.h	/^static inline void *DArray_get(DArray *array, int i)$/;"	f	typeref:typename:void *
DArray_heapsort	DArray_algos.c	/^int DArray_heapsort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_last	DArray.h	/^#define DArray_last(/;"	d
DArray_max	DArray.h	/^#define DArray_max(/;"	d
DArray_mergesort	DArray_algos.c	/^int DArray_mergesort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_new	DArray.h	/^static inline void *DArray_new(DArray *array)$/;"	f	typeref:typename:void *
DArray_pop	DArray.c	/^void *DArray_pop(DArray *array)$/;"	f	typeref:typename:void *
DArray_push	DArray.c	/^int DArray_push(DArray *array, void *el)$/;"	f	typeref:typename:int
DArray_qsort	DArray_algos.c	/^int DArray_qsort(DArray *array, DArray_compare cmp)$/;"	f	typeref:typename:int
DArray_remove	DArray.h	/^static inline void *DArray_remove(DArray *array, int i)$/;"	f	typeref:typename:void *
DArray_resize	DArray.c	/^static inline int DArray_resize(DArray *array, size_t newsize)$/;"	f	typeref:typename:int	file:
DArray_set	DArray.h	/^static inline void DArray_set(DArray *array, int i, void *el)$/;"	f	typeref:typename:void
DEFAULT_EXPAND_RATE	DArray.h	/^#define DEFAULT_EXPAND_RATE /;"	d
DEFAULT_NUMBER_OF_BUCKETS	Hashmap.h	/^#define DEFAULT_NUMBER_OF_BUCKETS /;"	d
Hashmap	Hashmap.h	/^typedef struct Hashmap$/;"	s
Hashmap	Hashmap.h	/^} Hashmap;$/;"	t	typeref:struct:Hashmap
HashmapNode	Hashmap.h	/^typedef struct HashmapNode$/;"	s
HashmapNode	Hashmap.h	/^} HashmapNode;$/;"	t	typeref:struct:HashmapNode
Hashmap_compare	Hashmap.h	/^typedef int (*Hashmap_compare)(void *a, void *b);$/;"	t	typeref:typename:int (*)(void * a,void * b)
Hashmap_create	Hashmap.c	/^Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash)$/;"	f	typeref:typename:Hashmap *
Hashmap_delete	Hashmap.c	/^void *Hashmap_delete(Hashmap *map, void *key)$/;"	f	typeref:typename:void *
Hashmap_destroy	Hashmap.c	/^void Hashmap_destroy(Hashmap *map)$/;"	f	typeref:typename:void
Hashmap_find_bucket	Hashmap.c	/^static inline DArray *Hashmap_find_bucket(Hashmap *map, void *key,$/;"	f	typeref:typename:DArray *	file:
Hashmap_get	Hashmap.c	/^void *Hashmap_get(Hashmap *map, void *key)$/;"	f	typeref:typename:void *
Hashmap_get_node	Hashmap.c	/^static inline int Hashmap_get_node(Hashmap *map, uint32_t hash, DArray *bucket, void *key)$/;"	f	typeref:typename:int	file:
Hashmap_hash	Hashmap.h	/^typedef uint32_t (*Hashmap_hash)(void *key);$/;"	t	typeref:typename:uint32_t (*)(void * key)
Hashmap_node_create	Hashmap.c	/^static inline HashmapNode *Hashmap_node_create(int hash, void *key, void *data)$/;"	f	typeref:typename:HashmapNode *	file:
Hashmap_set	Hashmap.c	/^int Hashmap_set(Hashmap *map, void *key, void *data)$/;"	f	typeref:typename:int
Hashmap_traverse	Hashmap.c	/^int Hashmap_traverse(Hashmap *map, Hashmap_traverse_cb traverse_cb)$/;"	f	typeref:typename:int
Hashmap_traverse_cb	Hashmap.h	/^typedef int (*Hashmap_traverse_cb)(HashmapNode *node);$/;"	t	typeref:typename:int (*)(HashmapNode * node)
INITIAL_STATIC_FIND_INDEX_COUNT	bstrlib.c	/^#define INITIAL_STATIC_FIND_INDEX_COUNT /;"	d	file:
LIST_FOREACH	list.h	/^#define LIST_FOREACH(/;"	d
LONG_BITS_QTY	bstrlib.c	/^#define LONG_BITS_QTY /;"	d	file:
LONG_LOG_BITS_QTY	bstrlib.c	/^#define LONG_LOG_BITS_QTY /;"	d	file:
LONG_TYPE	bstrlib.c	/^#define LONG_TYPE /;"	d	file:
List	list.h	/^typedef struct List$/;"	s
List	list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	list.h	/^typedef struct ListNode$/;"	s
ListNode	list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
ListNode_swap	list_algos.c	/^void ListNode_swap(ListNode *a, ListNode *b)$/;"	f	typeref:typename:void
List_bubble_sort	list_algos.c	/^int List_bubble_sort(List *list, List_compare cmp)$/;"	f	typeref:typename:int
List_clear	list.c	/^void List_clear(List *list)$/;"	f	typeref:typename:void
List_clear_destroy	list.c	/^void List_clear_destroy(List *list)$/;"	f	typeref:typename:void
List_compare	list_algos.h	/^typedef int (*List_compare)(const void *str1, const void *str2);$/;"	t	typeref:typename:int (*)(const void * str1,const void * str2)
List_count	list.h	/^#define List_count(/;"	d
List_create	list.c	/^List *List_create()$/;"	f	typeref:typename:List *
List_destroy	list.c	/^void List_destroy(List *list)$/;"	f	typeref:typename:void
List_first	list.h	/^#define List_first(/;"	d
List_last	list.h	/^#define List_last(/;"	d
List_merge	list_algos.c	/^List *List_merge(List *left, List *right, List_compare cmp)$/;"	f	typeref:typename:List *
List_merge_sort	list_algos.c	/^List *List_merge_sort(List *list, List_compare cmp)$/;"	f	typeref:typename:List *
List_pop	list.c	/^void *List_pop(List *list)$/;"	f	typeref:typename:void *
List_push	list.c	/^void List_push(List *list, void *value)$/;"	f	typeref:typename:void
List_remove	list.c	/^void *List_remove(List *list, ListNode *node)$/;"	f	typeref:typename:void *
List_shift	list.c	/^void *List_shift(List *list)$/;"	f	typeref:typename:void *
List_unshift	list.c	/^void List_unshift(List *list, void *value)$/;"	f	typeref:typename:void
START_VSNBUFF	bstrlib.c	/^#define START_VSNBUFF /;"	d	file:
_BSTree_H	bstree.h	/^#define _BSTree_H$/;"	d
_CRT_SECURE_NO_WARNINGS	bstrlib.c	/^# define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_DArray_H	DArray.h	/^#define _DArray_H$/;"	d
__anon982e7b800108	bstree.h	/^typedef struct {$/;"	s
__anon982e7b800208	bstree.h	/^typedef struct {$/;"	s
__dbg_h__	dbg.h	/^#define __dbg_h__$/;"	d
_lcthw_Hashmap_h	Hashmap.h	/^#define _lcthw_Hashmap_h$/;"	d
_lcthw_List_algos_h	list_algos.h	/^#define _lcthw_List_algos_h$/;"	d
_lcthw_List_h	list.h	/^#define _lcthw_List_h$/;"	d
b	bstrlib.c	/^	bstring b;$/;"	m	struct:genBstrList	typeref:typename:bstring	file:
bBlockCopy	bstrlib.c	/^#define bBlockCopy(/;"	d	file:
bNgetc	bstrlib.h	/^typedef int (*bNgetc) (void *parm);$/;"	t	typeref:typename:int (*)(void * parm)
bNread	bstrlib.h	/^typedef size_t (* bNread) (void *buff, size_t elsize, size_t nelem, void *parm);$/;"	t	typeref:typename:size_t (*)(void * buff,size_t elsize,size_t nelem,void * parm)
bStream	bstrlib.c	/^struct bStream {$/;"	s	file:
balloc	bstrlib.c	/^int balloc (bstring b, int olen) {$/;"	f	typeref:typename:int
ballocmin	bstrlib.c	/^int ballocmin (bstring b, int len) {$/;"	f	typeref:typename:int
bassign	bstrlib.c	/^int bassign (bstring a, const_bstring b) {$/;"	f	typeref:typename:int
bassignStatic	bstrlib.h	/^#define bassignStatic(/;"	d
bassignblk	bstrlib.c	/^int bassignblk (bstring a, const void * s, int len) {$/;"	f	typeref:typename:int
bassigncstr	bstrlib.c	/^int bassigncstr (bstring a, const char * str) {$/;"	f	typeref:typename:int
bassignformat	bstrlib.c	/^int bassignformat (bstring b, const char * fmt, ...) {$/;"	f	typeref:typename:int
bassigngets	bstrlib.c	/^int bassigngets (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:int
bassignmidstr	bstrlib.c	/^int bassignmidstr (bstring a, const_bstring b, int left, int len) {$/;"	f	typeref:typename:int
bcatStatic	bstrlib.h	/^#define bcatStatic(/;"	d
bcatblk	bstrlib.c	/^int bcatblk (bstring b, const void * s, int len) {$/;"	f	typeref:typename:int
bcatcstr	bstrlib.c	/^int bcatcstr (bstring b, const char * s) {$/;"	f	typeref:typename:int
bchar	bstrlib.h	/^#define bchar(/;"	d
bchare	bstrlib.h	/^#define bchare(/;"	d
bconcat	bstrlib.c	/^int bconcat (bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bconchar	bstrlib.c	/^int bconchar (bstring b, char c) {$/;"	f	typeref:typename:int
bcstrfree	bstrlib.c	/^int bcstrfree (char * s) {$/;"	f	typeref:typename:int
bdata	bstrlib.h	/^#define bdata(/;"	d
bdatae	bstrlib.h	/^#define bdatae(/;"	d
bdataofs	bstrlib.h	/^#define bdataofs(/;"	d
bdataofse	bstrlib.h	/^#define bdataofse(/;"	d
bdelete	bstrlib.c	/^int bdelete (bstring b, int pos, int len) {$/;"	f	typeref:typename:int
bdestroy	bstrlib.c	/^int bdestroy (bstring b) {$/;"	f	typeref:typename:int
bfindreplace	bstrlib.c	/^int bfindreplace (bstring b, const_bstring find, const_bstring repl,$/;"	f	typeref:typename:int
bfindreplacecaseless	bstrlib.c	/^int bfindreplacecaseless (bstring b, const_bstring find, const_bstring repl,$/;"	f	typeref:typename:int
bformat	bstrlib.c	/^bstring bformat (const char * fmt, ...) {$/;"	f	typeref:typename:bstring
bformata	bstrlib.c	/^int bformata (bstring b, const char * fmt, ...) {$/;"	f	typeref:typename:int
bfromStatic	bstrlib.h	/^#define bfromStatic(/;"	d
bfromcstr	bstrlib.c	/^bstring bfromcstr (const char * str) {$/;"	f	typeref:typename:bstring
bfromcstralloc	bstrlib.c	/^bstring bfromcstralloc (int mlen, const char * str) {$/;"	f	typeref:typename:bstring
bfromcstrrangealloc	bstrlib.c	/^bstring bfromcstrrangealloc (int minl, int maxl, const char* str) {$/;"	f	typeref:typename:bstring
bgets	bstrlib.c	/^bstring bgets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:bstring
bgetsa	bstrlib.c	/^int bgetsa (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f	typeref:typename:int
binchr	bstrlib.c	/^int binchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
binchrCF	bstrlib.c	/^static int binchrCF (const unsigned char * data, int len, int pos,$/;"	f	typeref:typename:int	file:
binchrr	bstrlib.c	/^int binchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
binchrrCF	bstrlib.c	/^static int binchrrCF (const unsigned char * data, int pos,$/;"	f	typeref:typename:int	file:
binsert	bstrlib.c	/^int binsert (bstring b1, int pos, const_bstring b2, unsigned char fill) {$/;"	f	typeref:typename:int
binsertStatic	bstrlib.h	/^#define binsertStatic(/;"	d
binsertblk	bstrlib.c	/^int binsertblk (bstring b, int pos, const void * blk, int len,$/;"	f	typeref:typename:int
binsertch	bstrlib.c	/^int binsertch (bstring b, int pos, int len, unsigned char fill) {$/;"	f	typeref:typename:int
binstr	bstrlib.c	/^int binstr (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrcaseless	bstrlib.c	/^int binstrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrr	bstrlib.c	/^int binstrr (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
binstrrcaseless	bstrlib.c	/^int binstrrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f	typeref:typename:int
biseq	bstrlib.c	/^int biseq (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
biseqStatic	bstrlib.h	/^#define biseqStatic(/;"	d
biseqblk	bstrlib.c	/^int biseqblk (const_bstring b, const void * blk, int len) {$/;"	f	typeref:typename:int
biseqcaseless	bstrlib.c	/^int biseqcaseless (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
biseqcaselessStatic	bstrlib.h	/^#define biseqcaselessStatic(/;"	d
biseqcaselessblk	bstrlib.c	/^int biseqcaselessblk (const_bstring b, const void * blk, int len) {$/;"	f	typeref:typename:int
biseqcstr	bstrlib.c	/^int biseqcstr (const_bstring b, const char * s) {$/;"	f	typeref:typename:int
biseqcstrcaseless	bstrlib.c	/^int biseqcstrcaseless (const_bstring b, const char * s) {$/;"	f	typeref:typename:int
bisstemeqStatic	bstrlib.h	/^#define bisstemeqStatic(/;"	d
bisstemeqblk	bstrlib.c	/^int bisstemeqblk (const_bstring b0, const void * blk, int len) {$/;"	f	typeref:typename:int
bisstemeqcaselessStatic	bstrlib.h	/^#define bisstemeqcaselessStatic(/;"	d
bisstemeqcaselessblk	bstrlib.c	/^int bisstemeqcaselessblk (const_bstring b0, const void * blk, int len) {$/;"	f	typeref:typename:int
biswriteprotected	bstrlib.h	/^#define biswriteprotected(/;"	d
bjoin	bstrlib.c	/^bstring bjoin (const struct bstrList * bl, const_bstring sep) {$/;"	f	typeref:typename:bstring
bjoinStatic	bstrlib.h	/^#define bjoinStatic(/;"	d
bjoinblk	bstrlib.c	/^bstring bjoinblk (const struct bstrList * bl, const void * blk, int len) {$/;"	f	typeref:typename:bstring
bl	bstrlib.c	/^	struct bstrList * bl;$/;"	m	struct:genBstrList	typeref:struct:bstrList *	file:
blength	bstrlib.h	/^#define blength(/;"	d
blengthe	bstrlib.h	/^#define blengthe(/;"	d
blk2bstr	bstrlib.c	/^bstring blk2bstr (const void * blk, int len) {$/;"	f	typeref:typename:bstring
blk2tbstr	bstrlib.h	/^#define blk2tbstr(/;"	d
bltrimws	bstrlib.c	/^int bltrimws (bstring b) {$/;"	f	typeref:typename:int
bmid2tbstr	bstrlib.h	/^#define bmid2tbstr(/;"	d
bmidstr	bstrlib.c	/^bstring bmidstr (const_bstring b, int left, int len) {$/;"	f	typeref:typename:bstring
bninchr	bstrlib.c	/^int bninchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
bninchrr	bstrlib.c	/^int bninchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f	typeref:typename:int
bpattern	bstrlib.c	/^int bpattern (bstring b, int len) {$/;"	f	typeref:typename:int
bread	bstrlib.c	/^bstring bread (bNread readPtr, void * parm) {$/;"	f	typeref:typename:bstring
breada	bstrlib.c	/^int breada (bstring b, bNread readPtr, void * parm) {$/;"	f	typeref:typename:int
breplace	bstrlib.c	/^int breplace (bstring b1, int pos, int len, const_bstring b2,$/;"	f	typeref:typename:int
brtrimws	bstrlib.c	/^int brtrimws (bstring b) {$/;"	f	typeref:typename:int
bsStatic	bstrlib.h	/^# define bsStatic(/;"	d
bsStaticBlkParms	bstrlib.h	/^#define bsStaticBlkParms(/;"	d
bsStaticMlen	bstrlib.h	/^#define bsStaticMlen(/;"	d
bsbufflength	bstrlib.c	/^int bsbufflength (struct bStream * s, int sz) {$/;"	f	typeref:typename:int
bscb	bstrlib.c	/^static int bscb (void * parm, int ofs, int len) {$/;"	f	typeref:typename:int	file:
bsclose	bstrlib.c	/^void * bsclose (struct bStream * s) {$/;"	f	typeref:typename:void *
bseof	bstrlib.c	/^int bseof (const struct bStream * s) {$/;"	f	typeref:typename:int
bsetstr	bstrlib.c	/^int bsetstr (bstring b0, int pos, const_bstring b1, unsigned char fill) {$/;"	f	typeref:typename:int
bsopen	bstrlib.c	/^struct bStream * bsopen (bNread readPtr, void * parm) {$/;"	f	typeref:struct:bStream *
bspeek	bstrlib.c	/^int bspeek (bstring r, const struct bStream * s) {$/;"	f	typeref:typename:int
bsplit	bstrlib.c	/^struct bstrList * bsplit (const_bstring str, unsigned char splitChar) {$/;"	f	typeref:struct:bstrList *
bsplitcb	bstrlib.c	/^int bsplitcb (const_bstring str, unsigned char splitChar, int pos,$/;"	f	typeref:typename:int
bsplits	bstrlib.c	/^struct bstrList * bsplits (const_bstring str, const_bstring splitStr) {$/;"	f	typeref:struct:bstrList *
bsplitscb	bstrlib.c	/^int bsplitscb (const_bstring str, const_bstring splitStr, int pos,$/;"	f	typeref:typename:int
bsplitstr	bstrlib.c	/^struct bstrList * bsplitstr (const_bstring str, const_bstring splitStr) {$/;"	f	typeref:struct:bstrList *
bsplitstrcb	bstrlib.c	/^int bsplitstrcb (const_bstring str, const_bstring splitStr, int pos,$/;"	f	typeref:typename:int
bsread	bstrlib.c	/^int bsread (bstring r, struct bStream * s, int n) {$/;"	f	typeref:typename:int
bsreada	bstrlib.c	/^int bsreada (bstring r, struct bStream * s, int n) {$/;"	f	typeref:typename:int
bsreadln	bstrlib.c	/^int bsreadln (bstring r, struct bStream * s, char terminator) {$/;"	f	typeref:typename:int
bsreadlna	bstrlib.c	/^int bsreadlna (bstring r, struct bStream * s, char terminator) {$/;"	f	typeref:typename:int
bsreadlns	bstrlib.c	/^int bsreadlns (bstring r, struct bStream * s, const_bstring term) {$/;"	f	typeref:typename:int
bsreadlnsa	bstrlib.c	/^int bsreadlnsa (bstring r, struct bStream * s, const_bstring term) {$/;"	f	typeref:typename:int
bssplitscb	bstrlib.c	/^int bssplitscb (struct bStream * s, const_bstring splitStr,$/;"	f	typeref:typename:int
bssplitstrcb	bstrlib.c	/^int bssplitstrcb (struct bStream * s, const_bstring splitStr,$/;"	f	typeref:typename:int
bstr2cstr	bstrlib.c	/^char * bstr2cstr (const_bstring b, char z) {$/;"	f	typeref:typename:char *
bstrList	bstrlib.h	/^struct bstrList {$/;"	s
bstrListAlloc	bstrlib.c	/^int bstrListAlloc (struct bstrList * sl, int msz) {$/;"	f	typeref:typename:int
bstrListAllocMin	bstrlib.c	/^int bstrListAllocMin (struct bstrList * sl, int msz) {$/;"	f	typeref:typename:int
bstrListCreate	bstrlib.c	/^struct bstrList * bstrListCreate (void) {$/;"	f	typeref:struct:bstrList *
bstrListDestroy	bstrlib.c	/^int bstrListDestroy (struct bstrList * sl) {$/;"	f	typeref:typename:int
bstr__alloc	bstrlib.c	/^#define bstr__alloc(/;"	d	file:
bstr__alloc	bstrlib.c	/^void* bstr__alloc (size_t sz) {$/;"	f	typeref:typename:void *
bstr__free	bstrlib.c	/^#define bstr__free(/;"	d	file:
bstr__memchr	bstrlib.c	/^#define bstr__memchr(/;"	d	file:
bstr__memcmp	bstrlib.c	/^#define bstr__memcmp(/;"	d	file:
bstr__memcpy	bstrlib.c	/^#define bstr__memcpy(/;"	d	file:
bstr__memmove	bstrlib.c	/^#define bstr__memmove(/;"	d	file:
bstr__memset	bstrlib.c	/^#define bstr__memset(/;"	d	file:
bstr__realloc	bstrlib.c	/^#define bstr__realloc(/;"	d	file:
bstrchr	bstrlib.h	/^#define bstrchr(/;"	d
bstrchrp	bstrlib.c	/^int bstrchrp (const_bstring b, int c, int pos) {$/;"	f	typeref:typename:int
bstrcmp	bstrlib.c	/^int bstrcmp (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bstrcpy	bstrlib.c	/^bstring bstrcpy (const_bstring b) {$/;"	f	typeref:typename:bstring
bstricmp	bstrlib.c	/^int bstricmp (const_bstring b0, const_bstring b1) {$/;"	f	typeref:typename:int
bstring	bstrlib.h	/^typedef struct tagbstring * bstring;$/;"	t	typeref:struct:tagbstring *
bstrncmp	bstrlib.c	/^int bstrncmp (const_bstring b0, const_bstring b1, int n) {$/;"	f	typeref:typename:int
bstrnicmp	bstrlib.c	/^int bstrnicmp (const_bstring b0, const_bstring b1, int n) {$/;"	f	typeref:typename:int
bstrrchr	bstrlib.h	/^#define bstrrchr(/;"	d
bstrrchrp	bstrlib.c	/^int bstrrchrp (const_bstring b, int c, int pos) {$/;"	f	typeref:typename:int
bsunread	bstrlib.c	/^int bsunread (struct bStream * s, const_bstring b) {$/;"	f	typeref:typename:int
btfromblk	bstrlib.h	/^#define btfromblk(/;"	d
btfromblkltrimws	bstrlib.h	/^#define btfromblkltrimws(/;"	d
btfromblkrtrimws	bstrlib.h	/^#define btfromblkrtrimws(/;"	d
btfromblktrimws	bstrlib.h	/^#define btfromblktrimws(/;"	d
btfromcstr	bstrlib.h	/^#define btfromcstr(/;"	d
btolower	bstrlib.c	/^int btolower (bstring b) {$/;"	f	typeref:typename:int
btoupper	bstrlib.c	/^int btoupper (bstring b) {$/;"	f	typeref:typename:int
btrimws	bstrlib.c	/^int btrimws (bstring b) {$/;"	f	typeref:typename:int
btrunc	bstrlib.c	/^int btrunc (bstring b, int n) {$/;"	f	typeref:typename:int
buckets	Hashmap.h	/^    DArray *buckets;			\/\/ 用于存储键-值对的桶数组$/;"	m	struct:Hashmap	typeref:typename:DArray *
buff	bstrlib.c	/^	bstring buff;		\/* Buffer for over-reads *\/$/;"	m	struct:bStream	typeref:typename:bstring	file:
buildCharField	bstrlib.c	/^static int buildCharField (struct charField * cf, const_bstring b) {$/;"	f	typeref:typename:int	file:
bvcformata	bstrlib.c	/^int bvcformata (bstring b, int count, const char * fmt, va_list arg) {$/;"	f	typeref:typename:int
bvformata	bstrlib.h	/^#define bvformata(/;"	d
bwriteallow	bstrlib.h	/^#define bwriteallow(/;"	d
bwriteprotect	bstrlib.h	/^#define bwriteprotect(/;"	d
charField	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	s	file:
charField	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	s	file:
check	dbg.h	/^#define check(/;"	d
check_debug	dbg.h	/^#define check_debug(/;"	d
check_mem	dbg.h	/^#define check_mem(/;"	d
clean_errno	dbg.h	/^#define clean_errno(/;"	d
compare	Hashmap.h	/^    Hashmap_compare compare;	\/\/ 用于比较键的函数指针$/;"	m	struct:Hashmap	typeref:typename:Hashmap_compare
compare	bstree.h	/^    BSTree_compare compare;$/;"	m	struct:__anon982e7b800208	typeref:typename:BSTree_compare
const_bstring	bstrlib.h	/^typedef const struct tagbstring * const_bstring;$/;"	t	typeref:typename:const struct tagbstring *
content	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	m	struct:charField	typeref:typename:LONG_TYPE[]	file:
content	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	m	struct:charField	typeref:typename:unsigned char[]	file:
contents	DArray.h	/^    void **contents;        \/\/ 一个指向void*类型的指针数组，用于存储元素的实/;"	m	struct:DArray	typeref:typename:void **
count	bstree.h	/^    int count;$/;"	m	struct:__anon982e7b800208	typeref:typename:int
count	list.h	/^    int count;$/;"	m	struct:List	typeref:typename:int
cstr2bstr	bstrlib.h	/^#define cstr2bstr /;"	d
cstr2tbstr	bstrlib.h	/^#define cstr2tbstr /;"	d
darray_algos_h	DArray_algos.h	/^#define darray_algos_h$/;"	d
data	Hashmap.h	/^    void *data;      \/\/ 指向关联数据的指针$/;"	m	struct:HashmapNode	typeref:typename:void *
data	bstree.h	/^    void *data;$/;"	m	struct:__anon982e7b800108	typeref:typename:void *
data	bstrlib.h	/^	unsigned char * data;$/;"	m	struct:tagbstring	typeref:typename:unsigned char *
debug	dbg.h	/^#define debug(/;"	d
default_compare	Hashmap.c	/^static int default_compare(void *a, void *b)$/;"	f	typeref:typename:int	file:
default_compare	bstree.c	/^static int default_compare(void *a, void *b) {$/;"	f	typeref:typename:int	file:
default_hash	Hashmap.c	/^static uint32_t default_hash(void *a)$/;"	f	typeref:typename:uint32_t	file:
downcase	bstrlib.c	/^#define downcase(/;"	d	file:
element_size	DArray.h	/^    size_t element_size;    \/\/ 数组中每个元素的大小$/;"	m	struct:DArray	typeref:typename:size_t
end	DArray.h	/^    int end;                \/\/ 数组的当前大小，数组中元素的数量$/;"	m	struct:DArray	typeref:typename:int
entry	bstrlib.h	/^    bstring * entry;$/;"	m	struct:bstrList	typeref:typename:bstring *
expand_rate	DArray.h	/^    size_t expand_rate;     \/\/ 数组扩展时的扩展速率$/;"	m	struct:DArray	typeref:typename:size_t
exvsnprintf	bstrlib.c	/^#define exvsnprintf(/;"	d	file:
findreplaceengine	bstrlib.c	/^static int findreplaceengine (bstring b, const_bstring find,$/;"	f	typeref:typename:int	file:
first	list.h	/^    ListNode *first;$/;"	m	struct:List	typeref:typename:ListNode *
genBstrList	bstrlib.c	/^struct genBstrList {$/;"	s	file:
hash	Hashmap.h	/^    Hashmap_hash hash;			\/\/ 用于对键进行哈希的函数指针$/;"	m	struct:Hashmap	typeref:typename:Hashmap_hash
hash	Hashmap.h	/^    uint32_t hash;   \/\/ 键的哈希值$/;"	m	struct:HashmapNode	typeref:typename:uint32_t
instr_fnptr	bstrlib.c	/^typedef int (*instr_fnptr) (const_bstring s1, int pos, const_bstring s2);$/;"	t	typeref:typename:int (*)(const_bstring s1,int pos,const_bstring s2)	file:
invertCharField	bstrlib.c	/^static void invertCharField (struct charField * cf) {$/;"	f	typeref:typename:void	file:
isEOF	bstrlib.c	/^	int isEOF;			\/* track file's EOF state *\/$/;"	m	struct:bStream	typeref:typename:int	file:
key	Hashmap.h	/^    void *key;       \/\/ 指向键的指针$/;"	m	struct:HashmapNode	typeref:typename:void *
key	bstree.h	/^    void *key;$/;"	m	struct:__anon982e7b800108	typeref:typename:void *
last	list.h	/^    ListNode *last;$/;"	m	struct:List	typeref:typename:ListNode *
left	bstree.h	/^    struct BSTreeNode *left;$/;"	m	struct:__anon982e7b800108	typeref:struct:BSTreeNode *
log_err	dbg.h	/^#define log_err(/;"	d
log_info	dbg.h	/^#define log_info(/;"	d
log_warn	dbg.h	/^#define log_warn(/;"	d
max	DArray.h	/^    int max;                \/\/ 数组的最大容量$/;"	m	struct:DArray	typeref:typename:int
maxBuffSz	bstrlib.c	/^	int maxBuffSz;$/;"	m	struct:bStream	typeref:typename:int	file:
mlen	bstrlib.h	/^	int mlen;$/;"	m	struct:tagbstring	typeref:typename:int
mlen	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList	typeref:typename:int
next	list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode *
parent	bstree.h	/^    struct BSTreeNode *parent;$/;"	m	struct:__anon982e7b800108	typeref:struct:BSTreeNode *
parm	bstrlib.c	/^	void * parm;		\/* The stream handle for core stream *\/$/;"	m	struct:bStream	typeref:typename:void *	file:
prev	list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode *
qty	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList	typeref:typename:int
readFnPtr	bstrlib.c	/^	bNread readFnPtr;	\/* fread compatible fnptr for core stream *\/$/;"	m	struct:bStream	typeref:typename:bNread	file:
right	bstree.h	/^    struct BSTreeNode *right;$/;"	m	struct:__anon982e7b800108	typeref:struct:BSTreeNode *
root	bstree.h	/^    BSTreeNode *root;$/;"	m	struct:__anon982e7b800208	typeref:typename:BSTreeNode *
sentinel	dbg.h	/^#define sentinel(/;"	d
setInCharField	bstrlib.c	/^#define setInCharField(/;"	d	file:
slen	bstrlib.h	/^	int slen;$/;"	m	struct:tagbstring	typeref:typename:int
snapUpSize	bstrlib.c	/^static int snapUpSize (int i) {$/;"	f	typeref:typename:int	file:
tagbstring	bstrlib.h	/^struct tagbstring {$/;"	s
testInCharField	bstrlib.c	/^#define testInCharField(/;"	d	file:
upcase	bstrlib.c	/^#define   upcase(/;"	d	file:
value	list.h	/^    void *value;$/;"	m	struct:ListNode	typeref:typename:void *
wspace	bstrlib.c	/^#define   wspace(/;"	d	file:
